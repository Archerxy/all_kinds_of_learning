########################################################################################
#######ecc 模式， with agency  如果是 without agency 在生成节点证书时agency.key等 换为 ca.key
########################################################################################

#########1.生成secp256k1.param##########
openssl ecparam -out secp256k1.param -name secp256k1

#########2.生成cert.cnf#########
cat << EOF > cert.cnf
[ca]
default_ca=default_ca
[default_ca]
default_days = 365
default_md = sha256

[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
[req_distinguished_name]
countryName = CN
countryName_default = CN
stateOrProvinceName = State or Province Name (full name)
stateOrProvinceName_default =GuangDong
localityName = Locality Name (eg, city)
localityName_default = ShenZhen
organizationalUnitName = Organizational Unit Name (eg, section)
organizationalUnitName_default = fisco-bcos
commonName =  Organizational  commonName (eg, fisco-bcos)
commonName_default = fisco-bcos
commonName_max = 64

[v3_req]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[v4_req]
basicConstraints = CA:TRUE

EOF

##########3.生成ca证书###########
openssl genpkey -paramfile secp256k1.param -out ca.key
openssl req -new -x509 -days 3560 -subj "/CN=xuyi/O=xy/OU=chain" -key ca.key -out ca.crt

##########4.生成agency证书##########
openssl genpkey -paramfile secp256k1.param -out agency.key
openssl req -new -sha256 -subj "/CN=xuyi_son/O=xy/OU=agency" -key agency.key -out agency.csr
openssl x509 -req -days 3650 -sha256 -CA ca.crt -CAkey ca.key -CAcreateserial -in agency.csr -out agency.crt -extensions v4_req -extfile cert.cnf

##########4.生成node证书##########
openssl genpkey -paramfile secp256k1.param -out node.key
openssl req -new -sha256 -subj "/CN=xuyi_node/O=xy/OU=node" -key node.key -config cert.cnf -out node.csr
openssl x509 -req -days 3650 -sha256 -in node.csr -CAkey  agency.key -CA agency.crt -out node.crt -CAcreateserial -extensions v3_req -extfile cert.cnf

##########5.生成nodeid##########
tassl ec -in node.key -text -noout 2> /dev/null | sed -n '7,11p' | sed 's/://g' | tr "\n" " " | sed 's/ //g' | awk '{print substr($0,3);}'  | cat > node.nodeid






##############################################################################################
#######guomi模式， with agency  如果是 without agency 在生成节点证书时gmagency.key等 换为 gmca.key
##############################################################################################

###########1.生成 gmsm2.param 文件#############
cat << EOF > gmsm2.param
-----BEGIN EC PARAMETERS-----
BggqgRzPVQGCLQ==
-----END EC PARAMETERS-----
EOF

###########2.生成tassl 配置文件#############
cat << EOF > gmcert.cnf
HOME			= .
RANDFILE		= $ENV::HOME/.rnd
oid_section		= new_oids

[ new_oids ]
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

[ ca ]
default_ca	= CA_default		# The default ca section

[ CA_default ]

dir		= ./demoCA		# Where everything is kept
certs		= $dir/certs		# Where the issued certs are kept
crl_dir		= $dir/crl		# Where the issued crl are kept
database	= $dir/index.txt	# database index file.
#unique_subject	= no			# Set to 'no' to allow creation of
					# several ctificates with same subject.
new_certs_dir	= $dir/newcerts		# default place for new certs.

certificate	= $dir/cacert.pem 	# The CA certificate
serial		= $dir/serial 		# The current serial number
crlnumber	= $dir/crlnumber	# the current crl number
					# must be commented out to leave a V1 CRL
crl		= $dir/crl.pem 		# The current CRL
private_key	= $dir/private/cakey.pem # The private key
RANDFILE	= $dir/private/.rand	# private random number file

x509_extensions	= usr_cert		# The extensions to add to the cert

name_opt 	= ca_default		# Subject Name options
cert_opt 	= ca_default		# Certificate field options

default_days	= 365			# how long to certify for
default_crl_days= 30			# how long before next CRL
default_md	= default		# use public key default MD
preserve	= no			# keep passed DN ordering

policy		= policy_match

[ policy_match ]
countryName		= match
stateOrProvinceName	= match
organizationName	= match
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

[ req ]
default_bits		= 2048
default_md		= sm3
default_keyfile 	= privkey.pem
distinguished_name	= req_distinguished_name
x509_extensions	= v3_ca	# The extensions to add to the self signed cert

string_mask = utf8only

[ req_distinguished_name ]
countryName = CN
countryName_default = CN
stateOrProvinceName = State or Province Name (full name)
stateOrProvinceName_default =GuangDong
localityName = Locality Name (eg, city)
localityName_default = ShenZhen
organizationalUnitName = Organizational Unit Name (eg, section)
organizationalUnitName_default = fisco
commonName =  Organizational  commonName (eg, fisco)
commonName_default =  fisco
commonName_max = 64

[ usr_cert ]
basicConstraints=CA:FALSE
nsComment			= "OpenSSL Generated Certificate"

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer

[ v3_req ]

# Extensions to add to a certificate request

basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature

[ v3enc_req ]

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage = keyAgreement, keyEncipherment, dataEncipherment

[ v3_agency_root ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
keyUsage = cRLSign, keyCertSign

[ v3_ca ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
keyUsage = cRLSign, keyCertSign

EOF

#############3.国密ca生成##############
tassl genpkey -paramfile gmsm2.param -out gmca.key
tassl req -config gmcert.cnf -x509 -days 3560 -subj "/CN=xuyi/O=xy/OU=chain" -key gmca.key -extensions v3_ca -out gmca.crt

#############4.生成agency##############
tassl genpkey -paramfile gmsm2.param -out gmagency.key
tassl req -new -subj "/CN=xuyi_son/O=xy/OU=agency" -key gmagency.key -config gmcert.cnf -out gmagency.csr
tassl x509 -sm3 -req -CA gmca.crt -CAkey gmca.key -days 3650 -CAcreateserial -in gmagency.csr -out gmagency.crt -extfile gmcert.cnf -extensions v3_agency_root
    
#############5.生成node##############
tassl genpkey -paramfile gmsm2.param -out gmnode.key
tassl req -new -subj "/CN=xuyi_node/O=xy/OU=node" -key gmnode.key -config gmcert.cnf -out gmnode.csr
tassl x509 -sm3 -req -CA gmagency.crt -CAkey gmagency.key -days 3650 -CAcreateserial -in gmnode.csr -out gmnode.crt -extfile gmcert.cnf -extensions v3_req
cat gmagency.crt >> gmnode.crt && cat gmca.crt >> gmnode.crt


#############5.生成ennode##############
tassl genpkey -paramfile gmsm2.param -out gmennode.key
tassl req -new -subj "/CN=xuyi_ennode/O=xy/OU=ennode" -key gmennode.key -config gmcert.cnf -out gmennode.csr
tassl x509 -sm3 -req -CA gmagency.crt -CAkey gmagency.key -days 3650 -CAcreateserial -in gmennode.csr -out gmennode.crt -extfile gmcert.cnf -extensions v3enc_req
    
#############6.生成nodeid##############
tassl ec -in gmnode.key -text -noout 2> /dev/null | sed -n '7,11p' | sed 's/://g' | tr "\n" " " | sed 's/ //g' | awk '{print substr($0,3);}'  | cat > gmnode.nodeid





























